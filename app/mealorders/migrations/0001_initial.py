# Generated by Django 3.1.2 on 2020-10-11 13:27

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Dish',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The date and time this register was created.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='The date and time this register was updated.', verbose_name='Updated')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
            ],
            options={
                'permissions': (('admin_dish', 'Admin Dishes'),),
            },
        ),
        migrations.CreateModel(
            name='SlackSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The date and time this register was created.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='The date and time this register was updated.', verbose_name='Updated')),
                ('token', models.CharField(max_length=64, verbose_name='Bot User OAuth Access Token')),
                ('channel_id', models.CharField(max_length=12, verbose_name='Channel ID')),
                ('channel_name', models.CharField(max_length=120, verbose_name='Channel name')),
            ],
            options={
                'permissions': (('admin_slacksetting', 'Admin Slack Setting'),),
            },
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, help_text='The date and time this register was created.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='The date and time this register was updated.', verbose_name='Updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField(unique=True, verbose_name='Menu date')),
                ('reminder_sent', models.BooleanField(default=False, verbose_name='Reminder sent')),
                ('last_reminder', models.DateTimeField(blank=True, help_text='Last time the reminder was sent', null=True, verbose_name='Last reminder')),
                ('dishes', models.ManyToManyField(related_name='menus', to='mealorders.Dish', verbose_name='Dishes')),
            ],
            options={
                'ordering': ['-date'],
                'permissions': (('admin_menu', 'Admin Menus'),),
            },
        ),
        migrations.CreateModel(
            name='EmployeeOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The date and time this register was created.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='The date and time this register was updated.', verbose_name='Updated')),
                ('full_name', models.CharField(max_length=50, verbose_name='Full name')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('observations', models.TextField(blank=True, null=True, verbose_name='Observations')),
                ('menu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='mealorders.menu', verbose_name='Menu')),
            ],
            options={
                'ordering': ['-created'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DishOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The date and time this register was created.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='The date and time this register was updated.', verbose_name='Updated')),
                ('quantity', models.PositiveSmallIntegerField(default=1, verbose_name='Quantity')),
                ('dish', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='dish_orders', to='mealorders.dish', verbose_name='Dish')),
                ('employee_order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dishes', to='mealorders.employeeorder', verbose_name='Employee order')),
            ],
            options={
                'ordering': ['-created'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The date and time this register was created.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='The date and time this register was updated.', verbose_name='Updated')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
